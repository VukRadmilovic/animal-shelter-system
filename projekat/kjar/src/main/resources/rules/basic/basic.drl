package basic;
import com.ftn.sbnz.model.enums.AnimalType;
import java.util.List;
import com.ftn.sbnz.model.enums.AnimalBreed;
import java.util.Arrays;
import org.kie.api.time.SessionClock;
import com.ftn.sbnz.model.models.Recommendation;
import com.ftn.sbnz.model.models.RecommendationsMap;
import com.ftn.sbnz.model.events.UserRecommendationCountChanged;
import com.ftn.sbnz.model.events.QuestionnaireFilled;
import com.ftn.sbnz.model.models.Response;
import com.ftn.sbnz.model.models.FinalistsForUsers;
import com.ftn.sbnz.model.events.FinalistsChangedForUser;
import com.ftn.sbnz.model.models.GlobalChart;
import com.ftn.sbnz.model.models.GlobalRecommendation;
import com.ftn.sbnz.model.models.Shelter;
import com.ftn.sbnz.model.models.Animal;
import com.ftn.sbnz.model.models.Worker;
import com.ftn.sbnz.model.events.Notification;
import com.ftn.sbnz.model.events.Promotion;
import com.ftn.sbnz.model.events.MoneyDeposit;
import com.ftn.sbnz.model.events.FoodPurchase;
import com.ftn.sbnz.model.events.Feeding;
import com.ftn.sbnz.model.events.GlobalChartTop5Update;
import com.ftn.sbnz.model.events.Resettlement;
import com.ftn.sbnz.model.enums.PromotionOrResettlementType;
import java.util.HashMap
import java.util.Map
import java.util.ArrayList
import java.util.Comparator
import java.util.Collections
import java.util.stream.Collectors
import java.util.EnumSet
import com.ftn.sbnz.model.models.Price
import com.ftn.sbnz.model.models.FoodAvailableForAnimal;

declare Worker
    username : String
    password : String
    shelter : Shelter
    fullName: String
end

rule "Breed recommendation update"
    no-loop
    when
        $recommendation : Recommendation($userId: userId, $breeds: animalBreeds)
        $recommendationsMap: RecommendationsMap($map : map)
    then
        System.out.println("inside recommendation update");
        Map<Long, Map<AnimalBreed, Integer>> newMap = (HashMap<Long, Map<AnimalBreed, Integer>>)$map;
        newMap.putIfAbsent($userId, new HashMap<AnimalBreed,Integer>());
        for(Object breed : $breeds) {
            AnimalBreed breedEnum = (AnimalBreed)breed;
            if(newMap.get($userId).get(breedEnum) == null)
                newMap.get($userId).put(breedEnum,1);
            else
                newMap.get($userId).put(breedEnum, newMap.get($userId).get(breedEnum) + 1);
        }
        modify($recommendationsMap){setMap(newMap)};
        insert(new UserRecommendationCountChanged($userId));
end

rule "Breed recommendation for user insertion"
    when
        $recommendation : Recommendation($userId: userId)
        $recommendationsMap : RecommendationsMap($map : map)
        $finalists : FinalistsForUsers($final : finalists)
        $event : UserRecommendationCountChanged(userId == $userId)
    then
         System.out.println("inside user insertion");
         Map<Long, List<AnimalBreed>> newMap = (HashMap<Long, List<AnimalBreed>>)$final;
         newMap.putIfAbsent($userId, new ArrayList<AnimalBreed>());
         for (Map.Entry<AnimalBreed, Integer> entry : ((HashMap<AnimalBreed, Integer>)$map.get($userId)).entrySet()) {
             if(entry.getValue() >= 10) {
                if(!newMap.get($userId).contains(entry.getKey())) {
                    newMap.get($userId).add(entry.getKey());
                };
             }
         }
         modify($finalists){setFinalists(newMap)};
         delete($recommendation);
         delete($event);
end

rule "Global charts update"
    when
        FinalistsForUsers($final : finalists)
        $globalChart: GlobalChart($list : recommendations)
        $event : QuestionnaireFilled($userId: userId)
    then
         System.out.println("inside global charts update");
         List<GlobalRecommendation> newList = new ArrayList();
         for(Object gr : $list) {
            GlobalRecommendation grc = (GlobalRecommendation)gr;
             newList.add(grc.clone());
         }
         for(Object breed : ((HashMap<Long,List<AnimalBreed>>)$final).get($userId)) {
            AnimalBreed breedEnum = (AnimalBreed)breed;
            newList.stream().filter(recommendation -> recommendation.getAnimalBreed() == breedEnum).forEach(res -> res.setRecommendationCount(res.getRecommendationCount() + 1));
         }
         newList.sort(Comparator.comparingInt(GlobalRecommendation::getRecommendationCount).reversed());
         List<GlobalRecommendation> top5 = $globalChart.getTop5Differences(newList.stream().limit(5).collect(Collectors.toList()));
         insert(new GlobalChartTop5Update(top5, newList));
         delete($event);
end


rule "Adoption promotion after global chart update"
    when
        $clock: SessionClock()
        $update: GlobalChartTop5Update($newList: newGlobalChart, $diffs : getNewAnimalBreeds(), $diffs.size() > 0)
        $globalChart: GlobalChart()
        $shelter: Shelter($animals: animals)
        $matches : List(size > 0) from accumulate(
                Animal($breed: animalBreed, $breed memberOf $diffs) from $animals,
                collectList($breed)
        )
    then
        System.out.println("Inside adoption promotion after global chart update");
        System.out.println($diffs);
        List<String> breeds = new ArrayList<>();
        for(Object breed : $matches) {
            AnimalBreed breedCast = (AnimalBreed) breed;
            String str = breedCast.toString().replace("_"," ").toLowerCase();
            breeds.add(str.substring(0, 1).toUpperCase() + str.substring(1));
        }
        insert(new Notification($clock.getCurrentTime(), $shelter,String.join(", ", breeds) + " are in the top 5 most suitable pets and available in shelter. Adoption promotion is recommended."));
        modify($globalChart){setRecommendations($newList)};
        delete($update);
end

rule "New animal sheltered, update shelter"
    when
        $resettlement: Resettlement(resettlementType == resettlementType.SHELTERING, $shelter: shelter, $animal: animal)
    then
        modify($shelter){addAnimal($animal)};
        System.out.println("New animal added");
end

rule "If amount of sheltered animals changes, recalculate money needed for upkeep"
    when
        $shelter: Shelter($animals: animals)
    then
        double moneyNeeded = $shelter.calculateMoneyNeededForUpkeep();
        modify($shelter){setMoneyNeededForUpkeep(moneyNeeded)};
        System.out.println("Money for upkeep set");
end

rule "If more funds are needed, send notification"
    when
        $clock: SessionClock()
        $shelter: Shelter($moneyNeeded: moneyNeededForUpkeep, $moneyAvailable: moneyAvailable, moneyAvailable < moneyNeededForUpkeep)
    then
        Notification notification = new Notification($clock.getCurrentTime(), $shelter, "Money available (" + $moneyAvailable + ") is less than money needed for upkeep (" + $moneyNeeded + "). Seek funds!");
        insert(notification);
//        System.out.println(notification);
        System.out.println("More funds needed!");
end

rule "If shelter 90%+ full, start adoption promotion"
    when
        $clock: SessionClock()
        $shelter: Shelter($capacity: capacity, $animals: animals)
        Number(intValue >= $capacity * 0.9) from accumulate(
            Animal() from $animals,
            count()
        )
        not Promotion(shelter == $shelter, isActive == true)
    then
        Promotion promotion = new Promotion($clock.getCurrentTime(), $shelter, PromotionOrResettlementType.ADOPTION);
        insert(promotion);
        System.out.println(promotion);
        System.out.println("Adoption promotion started!");
end

rule "If animal adopted, remove from shelter"
    when
        $resettlement: Resettlement(resettlementType == resettlementType.ADOPTION, $shelter: shelter, $animal: animal)
    then
        modify($shelter){removeAnimal($animal)};
        System.out.println("Animal removed");
end

rule "If shelter less than 50% full, start sheltering promotion"
    when
        $clock: SessionClock()
        $shelter: Shelter($capacity: capacity, $animals: animals)
        Number(intValue < $capacity * 0.5) from accumulate(
            Animal() from $animals,
            count()
        )
        not Promotion(shelter == $shelter, isActive == true)
    then
        Promotion promotion = new Promotion($clock.getCurrentTime(), $shelter, PromotionOrResettlementType.SHELTERING);
        insert(promotion);
        System.out.println(promotion);
        System.out.println("Sheltering promotion started!");
end

rule "When money is deposited, increase shelter's available money"
    when
        $moneyDeposit: MoneyDeposit($shelter: shelter, $amount: amount)
    then
        double availableMoney = $shelter.getMoneyAvailable() + $amount;
        modify($shelter){setMoneyAvailable(availableMoney)};
        System.out.println($amount + " was deposited, setting available money to " + availableMoney);
end

rule "When food is purchased, decrease available money and increase amount of food available"
    when
        $foodPurchase: FoodPurchase($animalType: animalType, $quantity: quantity, $shelter: shelter)
    then
        double availableMoney = $shelter.getMoneyAvailable();
        availableMoney -= $quantity * $shelter.getPrices().get($animalType);
        modify($shelter){setMoneyAvailable(availableMoney)};

        System.out.println($quantity + " portions for " + $animalType + " were purchased, " +
         "setting available money to " + availableMoney);

        Map<AnimalType, Integer> availableForAnimals = $shelter.getFoodAvailableForAnimals();
        availableForAnimals.put($animalType, availableForAnimals.get($animalType) + $quantity);
        modify($shelter){setFoodAvailableForAnimals(availableForAnimals)};

        System.out.println("Increased amount of food available for " + $animalType + " by " + $quantity +
        " now available: " + availableForAnimals.get($animalType));
end

rule "When animal is fed, decrease available food for that animal type"
    when
        $feeding: Feeding($shelter: shelter, $animalType: animalType)
        $numOfAnimalsOfSuchType: Number(intValue != 0) from accumulate (
            $animal: Animal( animalType == $animalType ) from $shelter.getAnimals(),
            count($animal)
        )
    then
        Map<AnimalType, Integer> availableForAnimals = $shelter.getFoodAvailableForAnimals();
        availableForAnimals.put($animalType, availableForAnimals.get($animalType) - $numOfAnimalsOfSuchType.intValue());
        modify($shelter){setFoodAvailableForAnimals(availableForAnimals)};

        System.out.println("Decreased amount of food available for " + $animalType + " by " + $numOfAnimalsOfSuchType.intValue() +
        " now available: " + availableForAnimals.get($animalType));
end


rule "When the amount of sheltered animals changes or someone is fed, check if enough food is available"
    when
        $clock: SessionClock()
        ($shelter: Shelter($animal: animals) or $feedingEvent: Feeding($shelter: shelter))
    then
        System.out.println("Food check");
        Map<AnimalType, Integer> availableForAnimals = new HashMap<>($shelter.getFoodAvailableForAnimals());

        for (Object animalO : $shelter.getAnimals()) {
            Animal animal = (Animal) animalO;
            availableForAnimals.put(animal.getAnimalType(), availableForAnimals.get(animal.getAnimalType()) - 1);

            if (availableForAnimals.get(animal.getAnimalType()) == -1) {
                Notification notification = new Notification($clock.getCurrentTime(), $shelter, "Not enough food to feed all " + animal.getAnimalType() + "! Urgently purchase food.");
                insert(notification);
                System.out.println(notification);
                System.out.println("Need more food for " + animal.getAnimalType());
            }
        }
end

rule "Send notification to feed the animals at 09:00, 13:00 and 18:00"
    timer( cron: 0 0 9,13,18 * * ? )
    when
        $clock: SessionClock()
        $shelter: Shelter()
    then
        Notification notification = new Notification($clock.getCurrentTime(), $shelter, "Time to feed the animals.");
        insert(notification);
        System.out.println("DINGDING " + notification);
end

query "getFinalists"
    $map : FinalistsForUsers()
end

query getWorker(String usernameP)
    $worker : Worker(username == usernameP)
end

query checkLogin(String usernameP, String passwordP)
    $worker : Worker(username == usernameP, password == passwordP)
end

query "checkShelter"
    $shelter: Shelter()
end

query "getGlobalChart"
    $globalChart: GlobalChart()
end

query "getNotifications"
    $notifications: List() from collect(Notification())
end

query "getPromotions"
    $promotions: List() from collect(Promotion())
end